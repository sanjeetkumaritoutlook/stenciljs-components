/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { apiData } from "./components/my-button/types";
import { EasingType } from "easing-animation-frames";
import { ColorChangeEventPayload, EventPayload, ProgressEventPayload } from "./components/my-progress-ring/my-progress-ring";
import { RouterHistory } from "@stencil/router";
import { AdvancedType, SlideValue } from "./components/slider-component/slider-component";
export { apiData } from "./components/my-button/types";
export { EasingType } from "easing-animation-frames";
export { ColorChangeEventPayload, EventPayload, ProgressEventPayload } from "./components/my-progress-ring/my-progress-ring";
export { RouterHistory } from "@stencil/router";
export { AdvancedType, SlideValue } from "./components/slider-component/slider-component";
export namespace Components {
    interface ComboBox {
        "allowInput": boolean;
        "label": string;
    }
    interface ComplexIonicForm {
    }
    interface CustomForm {
    }
    interface CustomTextInput {
    }
    interface EmbedComponent {
        "color": string;
    }
    interface MyButton {
        "text": string;
    }
    interface MyCard {
        "userName": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MyName {
        "name": string;
    }
    interface MyPaymentGateway {
    }
    interface MyPieChart {
        "data": string;
        "height": number;
        "width": number;
    }
    interface MyProgressBar {
        "max": number;
        "value": number;
    }
    interface MyProgressRing {
        /**
          * Color steps of the ring
         */
        "colors": string | Map<number, string>;
        /**
          * Font size of the decimal places
         */
        "decimalSize": number;
        /**
          * Hide decimal places
         */
        "disableDecimals": boolean;
        /**
          * Hide digits
         */
        "disableDigits": boolean;
        /**
          * Animation duration in miliseconds
         */
        "duration": number;
        /**
          * Easing animation function name
         */
        "easingType": EasingType;
        /**
          * Unique ID for the event listeners
         */
        "eventId"?: string;
        /**
          * Font size of the integer
         */
        "intSize": number;
        /**
          * Inverts the color scheme
         */
        "invertColors": boolean;
        /**
          * Percentage value (mandatory)
         */
        "percentage": number;
        /**
          * Radius of the ring
         */
        "radius": number;
        /**
          * Addes rounded linecap to the ring
         */
        "roundLinecap": boolean;
        /**
          * Thickness of the ring
         */
        "strokeWidth": number;
    }
    interface MyRichTextEditor {
        "disableQuickbars": boolean;
        "disabled": boolean;
        "initialValue": string;
        /**
          * Optional placeholder text displayed when the form field is empty.
         */
        "placeholder": string;
    }
    interface NiceAlert {
        "message": string;
    }
    interface ParentComponent {
    }
    interface SearchWorld {
        "searchText": string;
    }
    interface SimpleForm {
        "firstName": string;
        "history": RouterHistory;
        "lastName": string;
    }
    interface SliderComponent {
        "advanced": AdvancedType;
        "max": number;
        "min": number;
        "value"?: string | null;
    }
    interface StopWatch {
        "hours": string;
        "milliseconds": string;
        "minutes": string;
        "seconds": string;
    }
    interface StopWatchBox {
    }
    interface TestButton {
        "buttonId": string;
        "color": 'red' | 'green';
    }
    interface TestCounter {
    }
}
export interface ComboBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLComboBoxElement;
}
export interface CustomTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCustomTextInputElement;
}
export interface EmbedComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLEmbedComponentElement;
}
export interface MyButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyButtonElement;
}
export interface MyNameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyNameElement;
}
export interface MyProgressRingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyProgressRingElement;
}
export interface MyRichTextEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyRichTextEditorElement;
}
export interface NiceAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNiceAlertElement;
}
export interface SearchWorldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchWorldElement;
}
export interface SliderComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSliderComponentElement;
}
export interface TestButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTestButtonElement;
}
declare global {
    interface HTMLComboBoxElementEventMap {
        "comboBoxInput": string;
    }
    interface HTMLComboBoxElement extends Components.ComboBox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLComboBoxElementEventMap>(type: K, listener: (this: HTMLComboBoxElement, ev: ComboBoxCustomEvent<HTMLComboBoxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLComboBoxElementEventMap>(type: K, listener: (this: HTMLComboBoxElement, ev: ComboBoxCustomEvent<HTMLComboBoxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLComboBoxElement: {
        prototype: HTMLComboBoxElement;
        new (): HTMLComboBoxElement;
    };
    interface HTMLComplexIonicFormElement extends Components.ComplexIonicForm, HTMLStencilElement {
    }
    var HTMLComplexIonicFormElement: {
        prototype: HTMLComplexIonicFormElement;
        new (): HTMLComplexIonicFormElement;
    };
    interface HTMLCustomFormElement extends Components.CustomForm, HTMLStencilElement {
    }
    var HTMLCustomFormElement: {
        prototype: HTMLCustomFormElement;
        new (): HTMLCustomFormElement;
    };
    interface HTMLCustomTextInputElementEventMap {
        "customInput": string;
    }
    interface HTMLCustomTextInputElement extends Components.CustomTextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCustomTextInputElementEventMap>(type: K, listener: (this: HTMLCustomTextInputElement, ev: CustomTextInputCustomEvent<HTMLCustomTextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCustomTextInputElementEventMap>(type: K, listener: (this: HTMLCustomTextInputElement, ev: CustomTextInputCustomEvent<HTMLCustomTextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCustomTextInputElement: {
        prototype: HTMLCustomTextInputElement;
        new (): HTMLCustomTextInputElement;
    };
    interface HTMLEmbedComponentElementEventMap {
        "write": string;
    }
    interface HTMLEmbedComponentElement extends Components.EmbedComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLEmbedComponentElementEventMap>(type: K, listener: (this: HTMLEmbedComponentElement, ev: EmbedComponentCustomEvent<HTMLEmbedComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLEmbedComponentElementEventMap>(type: K, listener: (this: HTMLEmbedComponentElement, ev: EmbedComponentCustomEvent<HTMLEmbedComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLEmbedComponentElement: {
        prototype: HTMLEmbedComponentElement;
        new (): HTMLEmbedComponentElement;
    };
    interface HTMLMyButtonElementEventMap {
        "myEvent": apiData;
    }
    interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyButtonElementEventMap>(type: K, listener: (this: HTMLMyButtonElement, ev: MyButtonCustomEvent<HTMLMyButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyButtonElementEventMap>(type: K, listener: (this: HTMLMyButtonElement, ev: MyButtonCustomEvent<HTMLMyButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyButtonElement: {
        prototype: HTMLMyButtonElement;
        new (): HTMLMyButtonElement;
    };
    interface HTMLMyCardElement extends Components.MyCard, HTMLStencilElement {
    }
    var HTMLMyCardElement: {
        prototype: HTMLMyCardElement;
        new (): HTMLMyCardElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyNameElementEventMap {
        "myEvent": any;
    }
    interface HTMLMyNameElement extends Components.MyName, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyNameElementEventMap>(type: K, listener: (this: HTMLMyNameElement, ev: MyNameCustomEvent<HTMLMyNameElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyNameElementEventMap>(type: K, listener: (this: HTMLMyNameElement, ev: MyNameCustomEvent<HTMLMyNameElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyNameElement: {
        prototype: HTMLMyNameElement;
        new (): HTMLMyNameElement;
    };
    interface HTMLMyPaymentGatewayElement extends Components.MyPaymentGateway, HTMLStencilElement {
    }
    var HTMLMyPaymentGatewayElement: {
        prototype: HTMLMyPaymentGatewayElement;
        new (): HTMLMyPaymentGatewayElement;
    };
    interface HTMLMyPieChartElement extends Components.MyPieChart, HTMLStencilElement {
    }
    var HTMLMyPieChartElement: {
        prototype: HTMLMyPieChartElement;
        new (): HTMLMyPieChartElement;
    };
    interface HTMLMyProgressBarElement extends Components.MyProgressBar, HTMLStencilElement {
    }
    var HTMLMyProgressBarElement: {
        prototype: HTMLMyProgressBarElement;
        new (): HTMLMyProgressBarElement;
    };
    interface HTMLMyProgressRingElementEventMap {
        "prcProgress": ProgressEventPayload;
        "prcColor": ColorChangeEventPayload;
        "prcStart": EventPayload;
        "prcComplete": EventPayload;
        "prcStop": EventPayload;
        "prcResume": EventPayload;
        "prcRestart": EventPayload;
    }
    interface HTMLMyProgressRingElement extends Components.MyProgressRing, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyProgressRingElementEventMap>(type: K, listener: (this: HTMLMyProgressRingElement, ev: MyProgressRingCustomEvent<HTMLMyProgressRingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyProgressRingElementEventMap>(type: K, listener: (this: HTMLMyProgressRingElement, ev: MyProgressRingCustomEvent<HTMLMyProgressRingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyProgressRingElement: {
        prototype: HTMLMyProgressRingElement;
        new (): HTMLMyProgressRingElement;
    };
    interface HTMLMyRichTextEditorElementEventMap {
        "valueChange": string;
        "editorFocus": void;
        "editorBlur": void;
        "contentChanged": any;
    }
    interface HTMLMyRichTextEditorElement extends Components.MyRichTextEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyRichTextEditorElementEventMap>(type: K, listener: (this: HTMLMyRichTextEditorElement, ev: MyRichTextEditorCustomEvent<HTMLMyRichTextEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyRichTextEditorElementEventMap>(type: K, listener: (this: HTMLMyRichTextEditorElement, ev: MyRichTextEditorCustomEvent<HTMLMyRichTextEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyRichTextEditorElement: {
        prototype: HTMLMyRichTextEditorElement;
        new (): HTMLMyRichTextEditorElement;
    };
    interface HTMLNiceAlertElementEventMap {
        "alertDismissed": any;
    }
    interface HTMLNiceAlertElement extends Components.NiceAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNiceAlertElementEventMap>(type: K, listener: (this: HTMLNiceAlertElement, ev: NiceAlertCustomEvent<HTMLNiceAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNiceAlertElementEventMap>(type: K, listener: (this: HTMLNiceAlertElement, ev: NiceAlertCustomEvent<HTMLNiceAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNiceAlertElement: {
        prototype: HTMLNiceAlertElement;
        new (): HTMLNiceAlertElement;
    };
    interface HTMLParentComponentElement extends Components.ParentComponent, HTMLStencilElement {
    }
    var HTMLParentComponentElement: {
        prototype: HTMLParentComponentElement;
        new (): HTMLParentComponentElement;
    };
    interface HTMLSearchWorldElementEventMap {
        "searchWorldNameSelected": string;
    }
    interface HTMLSearchWorldElement extends Components.SearchWorld, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchWorldElementEventMap>(type: K, listener: (this: HTMLSearchWorldElement, ev: SearchWorldCustomEvent<HTMLSearchWorldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchWorldElementEventMap>(type: K, listener: (this: HTMLSearchWorldElement, ev: SearchWorldCustomEvent<HTMLSearchWorldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchWorldElement: {
        prototype: HTMLSearchWorldElement;
        new (): HTMLSearchWorldElement;
    };
    interface HTMLSimpleFormElement extends Components.SimpleForm, HTMLStencilElement {
    }
    var HTMLSimpleFormElement: {
        prototype: HTMLSimpleFormElement;
        new (): HTMLSimpleFormElement;
    };
    interface HTMLSliderComponentElementEventMap {
        "slideChanged": SlideValue;
    }
    interface HTMLSliderComponentElement extends Components.SliderComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSliderComponentElementEventMap>(type: K, listener: (this: HTMLSliderComponentElement, ev: SliderComponentCustomEvent<HTMLSliderComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSliderComponentElementEventMap>(type: K, listener: (this: HTMLSliderComponentElement, ev: SliderComponentCustomEvent<HTMLSliderComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSliderComponentElement: {
        prototype: HTMLSliderComponentElement;
        new (): HTMLSliderComponentElement;
    };
    interface HTMLStopWatchElement extends Components.StopWatch, HTMLStencilElement {
    }
    var HTMLStopWatchElement: {
        prototype: HTMLStopWatchElement;
        new (): HTMLStopWatchElement;
    };
    interface HTMLStopWatchBoxElement extends Components.StopWatchBox, HTMLStencilElement {
    }
    var HTMLStopWatchBoxElement: {
        prototype: HTMLStopWatchBoxElement;
        new (): HTMLStopWatchBoxElement;
    };
    interface HTMLTestButtonElementEventMap {
        "buttonClicked": any;
    }
    interface HTMLTestButtonElement extends Components.TestButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTestButtonElementEventMap>(type: K, listener: (this: HTMLTestButtonElement, ev: TestButtonCustomEvent<HTMLTestButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTestButtonElementEventMap>(type: K, listener: (this: HTMLTestButtonElement, ev: TestButtonCustomEvent<HTMLTestButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTestButtonElement: {
        prototype: HTMLTestButtonElement;
        new (): HTMLTestButtonElement;
    };
    interface HTMLTestCounterElement extends Components.TestCounter, HTMLStencilElement {
    }
    var HTMLTestCounterElement: {
        prototype: HTMLTestCounterElement;
        new (): HTMLTestCounterElement;
    };
    interface HTMLElementTagNameMap {
        "combo-box": HTMLComboBoxElement;
        "complex-ionic-form": HTMLComplexIonicFormElement;
        "custom-form": HTMLCustomFormElement;
        "custom-text-input": HTMLCustomTextInputElement;
        "embed-component": HTMLEmbedComponentElement;
        "my-button": HTMLMyButtonElement;
        "my-card": HTMLMyCardElement;
        "my-component": HTMLMyComponentElement;
        "my-name": HTMLMyNameElement;
        "my-payment-gateway": HTMLMyPaymentGatewayElement;
        "my-pie-chart": HTMLMyPieChartElement;
        "my-progress-bar": HTMLMyProgressBarElement;
        "my-progress-ring": HTMLMyProgressRingElement;
        "my-rich-text-editor": HTMLMyRichTextEditorElement;
        "nice-alert": HTMLNiceAlertElement;
        "parent-component": HTMLParentComponentElement;
        "search-world": HTMLSearchWorldElement;
        "simple-form": HTMLSimpleFormElement;
        "slider-component": HTMLSliderComponentElement;
        "stop-watch": HTMLStopWatchElement;
        "stop-watch-box": HTMLStopWatchBoxElement;
        "test-button": HTMLTestButtonElement;
        "test-counter": HTMLTestCounterElement;
    }
}
declare namespace LocalJSX {
    interface ComboBox {
        "allowInput"?: boolean;
        "label"?: string;
        "onComboBoxInput"?: (event: ComboBoxCustomEvent<string>) => void;
    }
    interface ComplexIonicForm {
    }
    interface CustomForm {
    }
    interface CustomTextInput {
        "onCustomInput"?: (event: CustomTextInputCustomEvent<string>) => void;
    }
    interface EmbedComponent {
        "color"?: string;
        "onWrite"?: (event: EmbedComponentCustomEvent<string>) => void;
    }
    interface MyButton {
        "onMyEvent"?: (event: MyButtonCustomEvent<apiData>) => void;
        "text"?: string;
    }
    interface MyCard {
        "userName"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface MyName {
        "name"?: string;
        "onMyEvent"?: (event: MyNameCustomEvent<any>) => void;
    }
    interface MyPaymentGateway {
    }
    interface MyPieChart {
        "data"?: string;
        "height"?: number;
        "width"?: number;
    }
    interface MyProgressBar {
        "max"?: number;
        "value"?: number;
    }
    interface MyProgressRing {
        /**
          * Color steps of the ring
         */
        "colors"?: string | Map<number, string>;
        /**
          * Font size of the decimal places
         */
        "decimalSize"?: number;
        /**
          * Hide decimal places
         */
        "disableDecimals"?: boolean;
        /**
          * Hide digits
         */
        "disableDigits"?: boolean;
        /**
          * Animation duration in miliseconds
         */
        "duration"?: number;
        /**
          * Easing animation function name
         */
        "easingType"?: EasingType;
        /**
          * Unique ID for the event listeners
         */
        "eventId"?: string;
        /**
          * Font size of the integer
         */
        "intSize"?: number;
        /**
          * Inverts the color scheme
         */
        "invertColors"?: boolean;
        /**
          * Color value to be emitted
         */
        "onPrcColor"?: (event: MyProgressRingCustomEvent<ColorChangeEventPayload>) => void;
        /**
          * OnComplete event of the animation
         */
        "onPrcComplete"?: (event: MyProgressRingCustomEvent<EventPayload>) => void;
        /**
          * Animation progress value to be emitted (from 0 to 1)
         */
        "onPrcProgress"?: (event: MyProgressRingCustomEvent<ProgressEventPayload>) => void;
        /**
          * OnRestart event of the animation
         */
        "onPrcRestart"?: (event: MyProgressRingCustomEvent<EventPayload>) => void;
        /**
          * OnResume event of the animation
         */
        "onPrcResume"?: (event: MyProgressRingCustomEvent<EventPayload>) => void;
        /**
          * OnStart event of the animation
         */
        "onPrcStart"?: (event: MyProgressRingCustomEvent<EventPayload>) => void;
        /**
          * OnStop event of the animation
         */
        "onPrcStop"?: (event: MyProgressRingCustomEvent<EventPayload>) => void;
        /**
          * Percentage value (mandatory)
         */
        "percentage"?: number;
        /**
          * Radius of the ring
         */
        "radius"?: number;
        /**
          * Addes rounded linecap to the ring
         */
        "roundLinecap"?: boolean;
        /**
          * Thickness of the ring
         */
        "strokeWidth"?: number;
    }
    interface MyRichTextEditor {
        "disableQuickbars"?: boolean;
        "disabled"?: boolean;
        "initialValue"?: string;
        "onContentChanged"?: (event: MyRichTextEditorCustomEvent<any>) => void;
        "onEditorBlur"?: (event: MyRichTextEditorCustomEvent<void>) => void;
        "onEditorFocus"?: (event: MyRichTextEditorCustomEvent<void>) => void;
        "onValueChange"?: (event: MyRichTextEditorCustomEvent<string>) => void;
        /**
          * Optional placeholder text displayed when the form field is empty.
         */
        "placeholder"?: string;
    }
    interface NiceAlert {
        "message"?: string;
        "onAlertDismissed"?: (event: NiceAlertCustomEvent<any>) => void;
    }
    interface ParentComponent {
    }
    interface SearchWorld {
        "onSearchWorldNameSelected"?: (event: SearchWorldCustomEvent<string>) => void;
        "searchText"?: string;
    }
    interface SimpleForm {
        "firstName"?: string;
        "history"?: RouterHistory;
        "lastName"?: string;
    }
    interface SliderComponent {
        "advanced"?: AdvancedType;
        "max"?: number;
        "min"?: number;
        "onSlideChanged"?: (event: SliderComponentCustomEvent<SlideValue>) => void;
        "value"?: string | null;
    }
    interface StopWatch {
        "hours"?: string;
        "milliseconds"?: string;
        "minutes"?: string;
        "seconds"?: string;
    }
    interface StopWatchBox {
    }
    interface TestButton {
        "buttonId"?: string;
        "color"?: 'red' | 'green';
        "onButtonClicked"?: (event: TestButtonCustomEvent<any>) => void;
    }
    interface TestCounter {
    }
    interface IntrinsicElements {
        "combo-box": ComboBox;
        "complex-ionic-form": ComplexIonicForm;
        "custom-form": CustomForm;
        "custom-text-input": CustomTextInput;
        "embed-component": EmbedComponent;
        "my-button": MyButton;
        "my-card": MyCard;
        "my-component": MyComponent;
        "my-name": MyName;
        "my-payment-gateway": MyPaymentGateway;
        "my-pie-chart": MyPieChart;
        "my-progress-bar": MyProgressBar;
        "my-progress-ring": MyProgressRing;
        "my-rich-text-editor": MyRichTextEditor;
        "nice-alert": NiceAlert;
        "parent-component": ParentComponent;
        "search-world": SearchWorld;
        "simple-form": SimpleForm;
        "slider-component": SliderComponent;
        "stop-watch": StopWatch;
        "stop-watch-box": StopWatchBox;
        "test-button": TestButton;
        "test-counter": TestCounter;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "combo-box": LocalJSX.ComboBox & JSXBase.HTMLAttributes<HTMLComboBoxElement>;
            "complex-ionic-form": LocalJSX.ComplexIonicForm & JSXBase.HTMLAttributes<HTMLComplexIonicFormElement>;
            "custom-form": LocalJSX.CustomForm & JSXBase.HTMLAttributes<HTMLCustomFormElement>;
            "custom-text-input": LocalJSX.CustomTextInput & JSXBase.HTMLAttributes<HTMLCustomTextInputElement>;
            "embed-component": LocalJSX.EmbedComponent & JSXBase.HTMLAttributes<HTMLEmbedComponentElement>;
            "my-button": LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
            "my-card": LocalJSX.MyCard & JSXBase.HTMLAttributes<HTMLMyCardElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-name": LocalJSX.MyName & JSXBase.HTMLAttributes<HTMLMyNameElement>;
            "my-payment-gateway": LocalJSX.MyPaymentGateway & JSXBase.HTMLAttributes<HTMLMyPaymentGatewayElement>;
            "my-pie-chart": LocalJSX.MyPieChart & JSXBase.HTMLAttributes<HTMLMyPieChartElement>;
            "my-progress-bar": LocalJSX.MyProgressBar & JSXBase.HTMLAttributes<HTMLMyProgressBarElement>;
            "my-progress-ring": LocalJSX.MyProgressRing & JSXBase.HTMLAttributes<HTMLMyProgressRingElement>;
            "my-rich-text-editor": LocalJSX.MyRichTextEditor & JSXBase.HTMLAttributes<HTMLMyRichTextEditorElement>;
            "nice-alert": LocalJSX.NiceAlert & JSXBase.HTMLAttributes<HTMLNiceAlertElement>;
            "parent-component": LocalJSX.ParentComponent & JSXBase.HTMLAttributes<HTMLParentComponentElement>;
            "search-world": LocalJSX.SearchWorld & JSXBase.HTMLAttributes<HTMLSearchWorldElement>;
            "simple-form": LocalJSX.SimpleForm & JSXBase.HTMLAttributes<HTMLSimpleFormElement>;
            "slider-component": LocalJSX.SliderComponent & JSXBase.HTMLAttributes<HTMLSliderComponentElement>;
            "stop-watch": LocalJSX.StopWatch & JSXBase.HTMLAttributes<HTMLStopWatchElement>;
            "stop-watch-box": LocalJSX.StopWatchBox & JSXBase.HTMLAttributes<HTMLStopWatchBoxElement>;
            "test-button": LocalJSX.TestButton & JSXBase.HTMLAttributes<HTMLTestButtonElement>;
            "test-counter": LocalJSX.TestCounter & JSXBase.HTMLAttributes<HTMLTestCounterElement>;
        }
    }
}
